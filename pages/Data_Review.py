import streamlit as st
import pandas as pd
from data_helper import *
from Data_Gen_App import *
import time
import traceback
import os

# Welcome the user to the page
st.title("Data Preview and Download")
st.header("Welcome to you data Preview & Download page.")

# Check for the presence of data_path
chat_history = get_chat_history()
chat_check = len(chat_history)
# Add a loading status indicator
if chat_check == 0:
    st.warning("Please generate your data by interacting with the chat app.")
else:
    st.success("Your data is ready to preview and download!")

# Display the data using Streamlit DataFrame
if chat_check > 0:
    # loading the chat history
    chat_history = get_chat_history()
    st.markdown("### Requirement Preview")
    st.write("Here you get to preview the requirements you have provided to the AI Assistant.")
    # setting the chat review
    chat_review_ = chat_reviewer(chat_history)
    # adding one second delay
    time.sleep(1)
    requirement = requirement_extractor(chat_history, chat_review_)
    time.sleep(1)
    # extracting features from requirements
    headings = requirement.keys()
    body = requirement.values()
    for head, bod in zip(headings, body):
        st.markdown(f"#### {head}")
        st.write(str(bod))

    # code generator
    st.markdown("### Code and Data Preview")
    # creating a button
    if st.button("Generate Code and Data"):
        st.write("Here you get to preview the code and data generated by the AI Assistant.")
        code_ = ""
        code = code_generator(chat_history, chat_review_, requirement)
        time.sleep(1)
        # code rewriter
        code = code_rewriter(code, requirement)
        time.sleep(1)
        # code_extractor
        code = code_extractor(code)
        time.sleep(1)
        # code modifier
        code = code_modifier(code)
        time.sleep(1)
        # code cleaner
        code = remove_triple_quotes(code)
        try:
            # saving the code
            code_saver(code, 'synthetic_data_generator.py')
            # executing the code
            code_executor()
            # assigning the code to the code_ variable
            code_ = code
            # showing the code
            st.code(code_, language='python')
            st.success("Data created successfully!")
            # loading the data
            df = pd.read_csv('data.csv')
            st.dataframe(df)
        except Exception as e:
            error = {
                    "error": str(e),
                    "traceback": traceback.format_exc()
                }
            # fixing the error
            new_code = code_fixer(code, error)
            time.sleep(0.5)
            # extracting the new code
            new_code = code_extractor(new_code)
            time.sleep(1)
            # modifying the new code
            new_code = code_modifier(new_code)
            time.sleep(1)
            # cleaning the new code
            new_code = remove_triple_quotes(new_code)
            # saving the new code
            code_saver(new_code, 'synthetic_data_generator.py')
            # executing the new code
            code_executor()
            # assigning the new code to the code_ variable
            code_ = new_code
            # showing the code
            st.code(code_, language='python')
            st.success("Data created successfully!")
            # loading the data
            df = pd.read_csv('data.csv')
            st.dataframe(df)
